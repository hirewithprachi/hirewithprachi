// Frontend-only solution - no Supabase import needed

/**
 * Generate PDF report using Resend API directly (frontend solution)
 * @param {string} calculatorType - Type of calculator (e.g., 'benefits', 'salary')
 * @param {object} result - Calculator result data
 * @param {object} userData - User information (email, name, company)
 * @returns {Promise<object>} - Response from the email service
 */
export const generatePdfReport = async (calculatorType, result, userData) => {
  try {
    console.log('Generating email report for:', calculatorType)

    // Validate inputs
    if (!calculatorType || !result || !userData || !userData.email) {
      throw new Error('Missing required parameters: calculatorType, result, userData.email')
    }

    // Create professional email content
    const emailContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background: #ffffff;">
        <div style="background: linear-gradient(135deg, #1e40af, #7c3aed); color: white; padding: 30px; border-radius: 12px; margin-bottom: 30px; text-align: center;">
          <div style="font-size: 28px; font-weight: 700; margin-bottom: 8px;">Hire With Prachi</div>
          <div style="font-size: 16px; opacity: 0.9; margin-bottom: 15px;">Professional HR Solutions & Consulting</div>
          <div style="font-size: 14px; opacity: 0.8;">Report Generated: ${new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</div>
        </div>
        
        <div style="background: #1e40af; color: white; padding: 25px; border-radius: 12px; margin-bottom: 30px; text-align: center;">
          <h1 style="font-size: 24px; font-weight: 600; margin: 0;">${calculatorType.charAt(0).toUpperCase() + calculatorType.slice(1)} Calculator Report</h1>
        </div>
        
        <div style="background: #f8fafc; padding: 30px; border-radius: 12px; margin-bottom: 30px;">
          <h2 style="color: #1e40af; margin-bottom: 20px;">Hello ${userData.name || userData.fullName || userData.email.split('@')[0]}!</h2>
          
          <p style="font-size: 16px; line-height: 1.6; margin-bottom: 20px;">
            Your HR calculator report is ready! Here are your detailed results:
          </p>
          
          <div style="background: #10b981; color: white; padding: 25px; border-radius: 12px; margin-bottom: 25px; text-align: center;">
            <div style="font-size: 18px; font-weight: 600; margin-bottom: 10px;">Analysis Complete</div>
            <div style="font-size: 32px; font-weight: 700; margin-bottom: 15px;">Results Ready</div>
          </div>
          
          <div style="background: white; padding: 20px; border-radius: 8px; border-left: 4px solid #1e40af; margin-bottom: 20px;">
            <h3 style="color: #1e40af; margin-bottom: 15px;">Detailed Results:</h3>
            <pre style="background: #f8fafc; padding: 15px; border-radius: 8px; overflow-x: auto; font-size: 14px; line-height: 1.4;">${JSON.stringify(result, null, 2)}</pre>
          </div>
          
          <div style="background: #fef3c7; padding: 20px; border-radius: 8px; border-left: 4px solid #f59e0b; margin-bottom: 20px;">
            <h4 style="color: #1f2937; margin-bottom: 10px; font-size: 16px;">Next Steps</h4>
            <p style="color: #374151; font-size: 14px;">Review your results and consider how these insights can improve your HR strategy. Our team is ready to help you implement these recommendations.</p>
          </div>
        </div>
        
        <div style="background: #059669; color: white; padding: 30px; border-radius: 12px; margin-bottom: 30px; text-align: center;">
          <div style="font-size: 20px; font-weight: 600; margin-bottom: 15px;">Ready to Transform Your HR Strategy?</div>
          <div style="font-size: 16px; margin-bottom: 20px; opacity: 0.9;">Book a FREE consultation with our HR experts</div>
          <div style="font-size: 14px; line-height: 1.8;">
            üìß info@hirewithprachi.com<br>
            üì± +91-8740889927<br>
            üåê prachi-hr.com
          </div>
        </div>
        
        <div style="background: #1f2937; color: white; padding: 25px; border-radius: 12px; text-align: center; font-size: 12px;">
          <div style="font-weight: 600; font-size: 14px; margin-bottom: 10px;">Generated by Hire with Prachi</div>
          <p style="margin-bottom: 5px;">Professional HR Solutions for Startups & SMEs</p>
          <p style="margin-bottom: 5px;">Generated on ${new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</p>
        </div>
      </div>
    `

    // Send email using Resend API directly
    const response = await fetch('https://api.resend.com/emails', {
      method: 'POST',
      headers: {
        'Authorization': 'Bearer re_jdaQP9kQ_JoPJLrmtwr14fLXB2X6EsNj6',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        from: 'Prachi Shrivastava <info@hirewithprachi.com>',
        to: userData.email,
        subject: `Your ${calculatorType.charAt(0).toUpperCase() + calculatorType.slice(1)} Calculator Report is Ready!`,
        html: emailContent
      })
    })

    if (!response.ok) {
      const errorText = await response.text()
      throw new Error(`Email sending failed: ${response.status} - ${errorText}`)
    }

    const emailResult = await response.json()
    console.log('Email sent successfully:', emailResult)

    return { 
      success: true, 
      message: 'Report generated and email sent successfully',
      emailId: emailResult.id 
    }

  } catch (error) {
    console.error('Error in generatePdfReport:', error)
    throw error
  }
}

/**
 * Generate PDF report with loading state management
 * @param {string} calculatorType - Type of calculator
 * @param {object} result - Calculator result data
 * @param {object} userData - User information
 * @param {function} setLoading - Function to set loading state
 * @param {function} setSuccess - Function to set success state
 * @param {function} setError - Function to set error state
 * @returns {Promise<void>}
 */
export const generatePdfWithStates = async (
  calculatorType, 
  result, 
  userData, 
  setLoading, 
  setSuccess, 
  setError
) => {
  try {
    setLoading(true)
    setError(null)
    setSuccess(false)

    console.log('Starting PDF generation with states...')
    console.log('Calculator type:', calculatorType)
    console.log('Result data:', result)
    console.log('User data:', userData)

    // Validate inputs
    if (!calculatorType || !result || !userData || !userData.email) {
      throw new Error('Missing required parameters for PDF generation')
    }

    const response = await generatePdfReport(calculatorType, result, userData)
    
    console.log('PDF generation successful:', response)
    
    setSuccess(true)
    setLoading(false)
    
    // Auto-hide success message after 5 seconds
    setTimeout(() => setSuccess(false), 5000)
    
    return response

  } catch (error) {
    console.error('PDF generation with states failed:', error)
    console.error('Error details:', {
      calculatorType,
      result: result ? 'Present' : 'Missing',
      userData: userData ? 'Present' : 'Missing',
      userEmail: userData?.email || 'Missing'
    })
    
    // Provide user-friendly error message
    let userMessage = 'PDF generation failed. Please try again.'
    
    if (error.message.includes('Missing required parameters')) {
      userMessage = 'Invalid data provided. Please try again.'
    } else if (error.message.includes('not deployed') || error.message.includes('being set up')) {
      userMessage = 'PDF service is being set up. Your report will be sent to your email once ready.'
    } else if (error.message.includes('network') || error.message.includes('fetch')) {
      userMessage = 'Network error. Please check your connection and try again.'
    } else if (error.message.includes('email')) {
      userMessage = 'Please provide a valid email address.'
    } else if (error.message.includes('429')) {
      userMessage = 'Service temporarily busy. Please try again in a moment.'
    }
    
    setError(userMessage)
    setLoading(false)
    setSuccess(false)
    throw error
  }
}

/**
 * Test function to verify the PDF generation system
 * @param {string} calculatorType - Type of calculator to test
 * @returns {Promise<object>} - Test result
 */
export const testPdfGeneration = async (calculatorType = 'benefits') => {
  try {
    console.log('Testing PDF generation for:', calculatorType)
    
    // Create test data based on calculator type
    let testResult = {}
    let testUserData = { 
      email: 'test@example.com', 
      name: 'Test User', 
      company: 'Test Company' 
    }
    
    switch (calculatorType) {
      case 'benefits':
        testResult = {
          totalBenefits: 150000,
          healthInsurance: 50000,
          dentalInsurance: 15000,
          visionInsurance: 10000,
          retirementMatch: 30000,
          paidTimeOff: 25000,
          bonuses: 20000,
          benefitsPercentage: 30,
          packageRating: 'Very Good'
        }
        break
      case 'salary':
        testResult = {
          calculatedSalary: 800000,
          position: 'HR Manager',
          experience: '5-8',
          location: 'Mumbai',
          industry: 'Technology'
        }
        break
      case 'engagement':
        testResult = {
          engagementScore: 75,
          engagementLevel: 'Moderately Engaged',
          totalScore: 15,
          maxScore: 20,
          recommendations: 'Focus on communication and recognition programs.'
        }
        break
      case 'cost-savings':
        testResult = {
          annualSavings: 500000,
          currentCost: 2000000,
          virtualCost: 1500000,
          savingsPercentage: 25
        }
        break
      case 'roi':
        testResult = {
          roiPercentage: 150,
          investment: 100000,
          expectedReturn: 250000,
          paybackPeriod: 8
        }
        break
      default:
        testResult = { test: 'Test data' }
    }
    
    const response = await generatePdfReport(calculatorType, testResult, testUserData)
    console.log('Test successful:', response)
    return response
    
  } catch (error) {
    console.error('Test failed:', error)
    throw error
  }
}

/**
 * Get supported calculator types
 * @returns {string[]} - Array of supported calculator types
 */
export const getSupportedCalculatorTypes = () => {
  return [
    'salary',
    'employee',
    'cost-savings',
    'roi',
    'needs-assessment',
    'engagement',
    'benchmarking',
    'benefits',
    'turnover',
    'performance',
    'resume-parser',
    'document-analyzer',
    'compliance-risk-checker'
  ]
}

/**
 * Validate calculator type
 * @param {string} calculatorType - Calculator type to validate
 * @returns {boolean} - Whether the calculator type is supported
 */
export const isValidCalculatorType = (calculatorType) => {
  const supportedTypes = getSupportedCalculatorTypes()
  return supportedTypes.includes(calculatorType)
} 